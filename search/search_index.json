{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> <p>KeyboardMouse.kt is still in an experimental stage, as such we can't guarantee API stability between releases. While we'd love for you to try out our library, we don't recommend you use this in production just yet.</p>"},{"location":"#what-is-keyboardmousekt","title":"What is KeyboardMouse.kt","text":"<p>KeyboardMouse.kt is a lightweight, coroutine-based multiplatform kotlin library for idiomatically interacting with Keyboard and Mouse (receiving and sending global events) from Kotlin, Java and NodeJS.</p> <p>We aim to provide high-level as well as high-performant low-level access to such APIs. See the usage (Keyboard/Mouse) section below to know more!</p>"},{"location":"#motivation","title":"Motivation","text":"<p>The most basic motivation (or use case) comes from trying to make our GUI app to hide on background and pop it back. Since most GUI frameworks only allow you to listen to events that are happening on the current window and when focus lost you don't get any, we've designed this lightweight library to easily control that.</p> <p>Another not quite good but a use-case is to simulate key-presses.</p> <p>We can integrate the Mouse and Keyboard API together, to for example simulate a click or something, it really depends on the personal use case.</p>"},{"location":"#contributing-and-future-plans","title":"Contributing and future plans","text":"<p>The Github discussions are open! Be sure to show your existence, say hi! and share if you have any upcoming ideas :)</p> <p>Issues and PRs are always welcome!</p> <p>For future plans and contributing to the project please checkout Contributing section.</p>"},{"location":"contributing/","title":"Contributing and future plans","text":"<p>\ud83d\udc4d\ud83c\udf89 First off, thanks for taking the time to contribute! \ud83c\udf89\ud83d\udc4d</p> <p>When contributing to this repository, please first discuss the change you wish to make via issue or github discussions.</p>"},{"location":"contributing/#how-is-the-project-organized","title":"How is the project organized","text":""},{"location":"contributing/#keyboard","title":"Keyboard","text":"<p>The project (keyboard) is divided into 4 modules: common, jvm, linuxX64, and mingwX64.</p> commonMain <p>The commonMain is where all the public interfaces and classes are defined and almost everything about it is documented in the README.md under the Usages section and there's a commonTest module where you can find a few more examples, etc)</p> jvmMain <p>The JVM one is implemented through JNI which requies Docker to build cross-platform the shared libraries. The implementation of K/Native and K/JVM are same.</p> linuxX64Main <p>LinuxX64 is implemented utilizing the XLib and XInput2, and linked dynamically (no need to install any headers for build). There is a plan to use the <code>/dev/uinput</code> or <code>/dev/input/eventX</code> devices as a fallback, see #6.</p> mingwX64Main <p>And lastly, MingwX64 is done through Win32 API.</p>"},{"location":"contributing/#future-plans","title":"Future Plans","text":"<p>Following are the future plans for the project:</p> <ul> <li> Migrate to dynamic library linking for linux (using dlopen/dlsym/dlclose from Posix API), see #1 for more   details.   on this commit.</li> <li> Create gradle task in to generate JNI headers for Kotlin external functions. Possibly by putting the task between   compile-task and jar packaging task.   References: Kotlin replacement for javah   , How to solve missing javah in Java 10 \u2013 ugly way</li> <li> Implement way to cross compile the C/C++ library from any OS to any OS and then package it up in the resulting   Jar. Done with PR #4.</li> <li> Implement JNI each for different platforms. I've considered it to do via C++ instead of reusing Kotlin/Native because   it will result in low performance and maybe huge sizes (if K/N becomes stable and performance wise equivalent we can   directly reuse the sources we've written).</li> <li> Add Linux Device (<code>/dev/uinput</code> | <code>/dev/input/xxx</code>) based implementation of interaction of Keyboard/Mouse as a   fallback when X11 is not present (after resolving #1).</li> <li> Implement Mouse API in similar way keyboard is implemented.</li> </ul>"},{"location":"contributing/#testing-and-building","title":"Testing and building","text":"<p>To build and publish to mavenLocal: <code>$ ./gradlew build publishToMavenLocal</code></p> <p>The only requirement is to install Docker when building for JVM &amp; JS due to cross-compilation requirement of JNI &amp; NApi native libs.</p> <p>If you ever get clock gets skewed (and Makefile get modified in the future) at the time of compilation of C++ sources, please restart the docker from the system tray.</p>"},{"location":"status-and-installation/","title":"Status and Installation","text":""},{"location":"status-and-installation/#status","title":"Status","text":"<ul> <li> Keyboard<ul> <li> JVM<ul> <li> Windows x86_64 (64 bit)</li> <li> Windows x86    (32 bit)</li> <li> Linux x86_64 (64 bit)</li> <li> Linux x86    (32 bit)</li> <li> Linux Arm32</li> <li> Linux Arm64</li> <li> MacOS</li> </ul> </li> <li> JS<ul> <li> Windows x86_64 (64 bit)</li> <li> Windows x86    (32 bit)</li> <li> Linux x86_64 (64 bit)</li> <li> Linux x86    (32 bit)</li> <li> Linux Arm32</li> <li> Linux Arm64</li> <li> MacOS</li> </ul> </li> <li> Native<ul> <li> Windows x86_64 (64 bit)</li> <li> Windows x86    (32 bit)</li> <li> Linux x86_64 (64 bit)</li> <li> Linux x86    (32 bit)</li> <li> Linux Arm32</li> <li> Linux Arm64</li> <li> MacOS</li> </ul> </li> </ul> </li> <li> Mouse<ul> <li> Windows</li> <li> Linux</li> <li> MacOS</li> <li> JVM</li> </ul> </li> </ul>"},{"location":"status-and-installation/#installation","title":"Installation","text":"Gradle (build.gradle.kts) Kotlin/JVM <pre><code>plugins {\n    kotlin(\"jvm\") version \"&lt;kotlin-version&gt;\"\n}\n\nrepositories {\n    maven(url = \"https://dl.bintray.com/animeshz/maven\")\n}\n\ndependencies {\n    implementation(\"com.github.animeshz:keyboard-kt-jvm:&lt;version&gt;\")\n    implementation(\"com.github.animeshz:mouse-kt-jvm:&lt;version&gt;\")\n}\n</code></pre> Kotlin/JS <pre><code>plugins {\n    kotlin(\"js\") version \"&lt;kotlin-version&gt;\"\n}\n\nrepositories {\n    maven(url = \"https://dl.bintray.com/animeshz/maven\")\n}\n\ndependencies {\n    implementation(\"com.github.animeshz:keyboard-kt-js:&lt;version&gt;\")\n    implementation(\"com.github.animeshz:mouse-kt-js:&lt;version&gt;\")\n}   \n</code></pre> Java/JVM <pre><code>plugins {\n    java\n}\n\nrepositories {\n    maven(url = \"https://dl.bintray.com/animeshz/maven\")\n}\n\ndependencies {\n    // Using from Java 8 or above (with complete Java support)\n    implementation(\"com.github.animeshz:keyboard-kt-jvm:&lt;version&gt;\")\n    implementation(\"com.github.animeshz:keyboard-kt-jdk8:&lt;version&gt;\")\n\n    implementation(\"com.github.animeshz:mouse-kt-jvm:&lt;version&gt;\")\n    implementation(\"com.github.animeshz:mouse-kt-jdk8:&lt;version&gt;\")\n}   \n</code></pre> Kotlin/Multiplatform <pre><code>plugins {\n    kotlin(\"mutliplatform\") version \"&lt;kotlin-version&gt;\"\n}\n\nrepositories {\n    maven(url = \"https://dl.bintray.com/animeshz/maven\")\n}\n\nkotlin {\n    // Your targets\n    jvm()\n    js()  // IR not supported right now, but will be soon.\n    mingwX64 {\n        binaries { executable { entryPoint = \"main\" } }\n    }\n    linuxX64 {\n        binaries { executable { entryPoint = \"main\" } }\n    }\n\n    // Dependency to the library\n    sourceSets {\n        // Either as common\n        val commonMain by getting {\n            dependencies {\n                implementation(kotlin(\"stdlib-common\"))\n                implementation(\"com.github.animeshz:keyboard-kt:&lt;version&gt;\")\n                implementation(\"com.github.animeshz:mouse-kt:&lt;version&gt;\")\n            }\n        }\n\n        // Or configure each-platform by the suffix such as -jvm, -linuxX64, etc.\n        val jvmMain by getting {\n            dependsOn(commonMain)\n            dependencies {\n                implementation(\"com.github.animeshz:keyboard-kt-jvm:&lt;version&gt;\")\n                implementation(\"com.github.animeshz:mouse-kt-jvm:&lt;version&gt;\")\n            }\n        }\n    }\n}\n</code></pre> Gradle (build.gradle) Kotlin/JVM <pre><code>plugins {\n    id \"kotlin-jvm\" version \"&lt;kotlin-version&gt;\"\n}\n\nrepositories {\n    maven { url \"https://dl.bintray.com/animeshz/maven\" }\n}\n\ndependencies {\n    implementation(\"com.github.animeshz:keyboard-kt-jvm:&lt;version&gt;\")\n    implementation(\"com.github.animeshz:mouse-kt-jvm:&lt;version&gt;\")\n}\n</code></pre> Kotlin/JVM <pre><code>plugins {\n    id \"kotlin-js\" version \"&lt;kotlin-version&gt;\"\n}\n\nrepositories {\n    maven { url \"https://dl.bintray.com/animeshz/maven\" }\n}\n\ndependencies {\n    implementation(\"com.github.animeshz:keyboard-kt-js:&lt;version&gt;\")\n    implementation(\"com.github.animeshz:mouse-kt-js:&lt;version&gt;\")\n}\n</code></pre> Java/JVM <pre><code>plugins {\n    java\n}\n\nrepositories {\n    maven { url \"https://dl.bintray.com/animeshz/maven\" }\n}\n\ndependencies {\n    // Using from Java 8 or above (with complete Java support)\n    implementation(\"com.github.animeshz:keyboard-kt-jvm:&lt;version&gt;\")\n    implementation(\"com.github.animeshz:keyboard-kt-jdk8:&lt;version&gt;\")\n\n    implementation(\"com.github.animeshz:mouse-kt-jvm:&lt;version&gt;\")\n    implementation(\"com.github.animeshz:mouse-kt-jdk8:&lt;version&gt;\")\n}   \n</code></pre> Kotlin/Multiplatform <pre><code>plugins {\n    id \"kotlin-mutliplatform\" version \"&lt;kotlin-version&gt;\"\n}\n\nrepositories {\n    maven { url \"https://dl.bintray.com/animeshz/maven\" }\n}\n\nkotlin {\n    // Your targets\n    jvm()\n    js()  // IR not supported right now, but will be soon.\n    mingwX64 {\n        binaries { executable { entryPoint = \"main\" } }\n    }\n    linuxX64 {\n        binaries { executable { entryPoint = \"main\" } }\n    }\n\n    // Dependency to the library\n    sourceSets {\n        // Either as common\n        commonMain {\n            dependencies {\n                implementation(kotlin(\"stdlib-common\"))\n                implementation(\"com.github.animeshz:keyboard-kt:&lt;version&gt;\")\n                implementation(\"com.github.animeshz:mouse-kt:&lt;version&gt;\")\n            }\n        }\n\n        // Or configure each-platform by the suffix such as -jvm, -linuxX64, etc.\n        jvmMain {\n            dependsOn(commonMain)\n            dependencies {\n                implementation(\"com.github.animeshz:keyboard-kt-jvm:&lt;version&gt;\")\n                implementation(\"com.github.animeshz:mouse-kt-jvm:&lt;version&gt;\")\n            }\n        }\n    }\n}\n</code></pre> Maven (pom.xml) Kotlin/JVM <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n  &lt;repositories&gt;\n    &lt;repository&gt;\n      &lt;id&gt;bintray-animeshz-maven&lt;/id&gt;\n      &lt;name&gt;bintray&lt;/name&gt;\n      &lt;url&gt;https://dl.bintray.com/animeshz/maven&lt;/url&gt;\n    &lt;/repository&gt;\n  &lt;/repositories&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.github.animeshz&lt;/groupId&gt;\n      &lt;artifactId&gt;keyboard-kt-jvm&lt;/artifactId&gt;\n      &lt;version&gt;0.2.2&lt;/version&gt;\n      &lt;type&gt;pom&lt;/type&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n\n&lt;/project&gt;\n</code></pre> Java/JVM <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n  &lt;repositories&gt;\n    &lt;repository&gt;\n      &lt;id&gt;bintray-animeshz-maven&lt;/id&gt;\n      &lt;name&gt;bintray&lt;/name&gt;\n      &lt;url&gt;https://dl.bintray.com/animeshz/maven&lt;/url&gt;\n    &lt;/repository&gt;\n  &lt;/repositories&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.github.animeshz&lt;/groupId&gt;\n      &lt;artifactId&gt;keyboard-kt-jvm&lt;/artifactId&gt;\n      &lt;version&gt;0.2.2&lt;/version&gt;\n      &lt;type&gt;pom&lt;/type&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.github.animeshz&lt;/groupId&gt;\n      &lt;artifactId&gt;keyboard-kt-jdk8&lt;/artifactId&gt;\n      &lt;version&gt;0.2.2&lt;/version&gt;\n      &lt;type&gt;pom&lt;/type&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n\n&lt;/project&gt;\n</code></pre> NPM/NodeJS (package.json) JS/NodeJS <pre><code>{\n    \"name\": \"&lt;project-name&gt;\",\n    \"version\": \"&lt;project-version&gt;\",\n\n    \"dependencies\": {\n        \"keyboard-kt\": \"^0.3.0\"\n    }\n}\n</code></pre>"},{"location":"status-and-installation/#use-interactively-with-jupyter-notebook","title":"Use interactively with Jupyter Notebook","text":"<p>Don't have time to setup a Gradle/Maven project? No worries, roll up a Kotlin's Jupyter Kernel, and use it as a REPL (it even has kotlin-autocompletion).</p> If you don't already have jupyter or kotlin-kernel, click here Installing JupyterLab <pre><code>python3 -m pip install jupyterlab\n</code></pre> Installing Kotlin Kernel <pre><code>git clone https://github.com/Kotlin/kotlin-jupyter.git &amp;&amp; cd kotlin-jupyter &amp;&amp; ./gradlew install &amp;&amp; cd -\n</code></pre> <p>Get the quickstart notebook for quickly start using the library without any hassles. <pre><code>curl https://raw.githubusercontent.com/Animeshz/keyboard-mouse-kt/master/docs/getting_started.ipynb -o getting_started.ipynb\n</code></pre> <sup>Note: If you are in windows assuming you're using powershell</sup></p> <p>Start the jupyter lab with: <pre><code>jupyter lab\n</code></pre></p> <p>A browser will open with current directory, open the <code>getting_started.ipynb</code> and start playing with it.</p> If you're new to jupyer, click here <p>use <code>Ctrl + Enter</code> to run a cell, <code>Esc</code> to get in command mode, <code>X</code> to cut a cell, <code>Z</code> to undo, <code>B</code> to create a new cell below, and so on. Refer to jupyter docs for more info.</p> <p>A simple demo gif:</p> <p></p>"},{"location":"keyboard/high-level-api/","title":"High Level API","text":"<p>Kotlin: High Level API depends on Keyboard which is a wrapper around the NativeKeyboardHandler.</p> <p>Java: High Level API depends on JKeyboard.</p> <p>NodeJS: High Level API depends on JsKeyboard.</p>"},{"location":"keyboard/high-level-api/#importing-the-package","title":"Importing the package.","text":"Kotlin (MPP) <pre><code>import com.github.animeshz.keyboard.Keyboard\n\nval keyboard = Keyboard()\n</code></pre> NodeJS <p><pre><code>const kbkt = require('keyboard-kt');\n\nconst keyboard = new kbkt.com.github.animeshz.keyboard.JsKeyboard();\n</code></pre> <sup>Note: This large import is due to limitations of K/JS to not able to export to global namespace currently, see KT-37710.</sup></p> Java 8 or above <pre><code>import com.github.animeshz.keyboard.JKeyboard;\n\nJKeyboard handler = new JKeyboard();\n</code></pre>"},{"location":"keyboard/high-level-api/#adding-a-shortcut-hotkey","title":"Adding a shortcut (Hotkey).","text":"Kotlin <p><pre><code>keyboard.addShortcut(Key.LeftCtrl + Key.E, trigger = KeyState.KeyDown) {\n    println(\"triggered\")\n}\n</code></pre> <sup>Note: The lambda is in suspend context, launched in context provided at time of instantiation of Keyboard (defaults to Dispatchers.Default).</sup></p> NodeJS <pre><code>keyboard.addShortcut('LeftCtrl + E', true,\n    () =&gt; console.log(\"triggered\")\n);\n</code></pre> Java 8 <pre><code>Set&lt;Key&gt; keys = new HashSet&lt;&gt;();\nCollections.addAll(keys, Key.LeftCtrl, Key.E);\n\nkeyboard.addShortcut(new KeySet(keys), KeyState.KeyDown,\n    () -&gt; System.out.println(\"triggered\")\n);\n</code></pre> Java 9 or above <pre><code>Set&lt;Key&gt; keys = Set.of(Key.LeftCtrl, Key.E);\n\nkeyboard.addShortcut(new KeySet(keys), KeyState.KeyDown,\n    () -&gt; System.out.println(\"triggered\")\n);\n</code></pre> <p><sup>Note: <code>trigger</code> defaults to KeyState.KeyDown when not provided.</sup></p>"},{"location":"keyboard/high-level-api/#send-a-keyset-to-the-host-machine","title":"Send a KeySet to the host machine.","text":"Kotlin <pre><code>keyboard.send(Key.LeftAlt + Key.M)\n</code></pre> NodeJS <pre><code>keyboard.send('LeftAlt + M');\n</code></pre> Java 8 <pre><code>Set&lt;Key&gt; keys = new HashSet&lt;&gt;();\nCollections.addAll(keys, Key.LeftAlt, Key.M);\n\nkeyboard.send(new KeySet(keys));\n</code></pre> Java 9 or above <pre><code>Set&lt;Key&gt; keys = Set.of(Key.LeftAlt, Key.M);\n\nkeyboard.send(new KeySet(keys));\n</code></pre>"},{"location":"keyboard/high-level-api/#write-a-sentence-string-on-the-host-machine","title":"Write a sentence (String) on the host machine.","text":"Kotlin <pre><code>keyboard.write(\"Hello Keyboard!\")\n</code></pre> NodeJS <pre><code>keyboard.write('Hello Keyboard!');\n</code></pre> Java 8 or above <pre><code>keyboard.write(\"Hello Keyboard!\");\n</code></pre>"},{"location":"keyboard/high-level-api/#wait-till-a-keyset-is-pressed","title":"Wait till a KeySet is pressed.","text":"<p>Suspensive wait in Kotlin, whereas asynchronous <code>CompletableFuture&lt;&gt;</code> for Java</p> Kotlin <pre><code>keyboard.awaitTill(Key.LeftCtrl + Key.LeftShift + Key.R, trigger = KeyState.KeyDown)\n</code></pre> NodeJS <pre><code>await keyboard.completeWhenPressed('LeftCtrl + LeftShift + R');\n</code></pre> Java 8 <p><pre><code>Set&lt;Key&gt; keys = new HashSet&lt;&gt;();\nCollections.addAll(keys, Key.LeftCtrl + Key.LeftShift + Key.R);\n\nkeyboard.completeWhenPressed(new KeySet(keys), KeyState.KeyDown)\n    .thenApply(unit -&gt; {...});\n</code></pre> <sup>Note: Unit is similar to java.lang.Void, a singleton object which has nothing to do for us.</sup></p> Java 9 or above <p><pre><code>Set&lt;Key&gt; keys = Set.of(Key.LeftCtrl + Key.LeftShift + Key.R);\n\nkeyboard.completeWhenPressed(new KeySet(keys), KeyState.KeyDown)\n    .thenApply(unit -&gt; {...});\n</code></pre> <sup>Note: Unit is similar to java.lang.Void, a singleton object which has nothing to do for us.</sup></p> <p><sup>Note: <code>trigger</code> defaults to KeyState.KeyDown when not provided.</sup></p>"},{"location":"keyboard/high-level-api/#record-key-presses-till-specific-keyset","title":"Record Key presses till specific KeySet.","text":"<p>Recorded KeyPresses is pushed into a KeyPressSequence (<code>List&lt;Duration, KeyEvent&gt;</code>)</p> Kotlin <pre><code>val records: KeyPressSequence = keyboard.recordTill(Key.LeftAlt + Key.A, trigger = KeyState.KeyDown)\n</code></pre> NodeJS <pre><code>const records = await keyboard.recordKeyPressesTill('LeftCtrl + LeftShift + R', true);\n</code></pre> Java 8 <pre><code>Set&lt;Key&gt; keys = new HashSet&lt;&gt;();\nCollections.addAll(keys, Key.LeftAlt, Key.A);\n\n// `trigger` defaults to KeyState.KeyDown when not provided.\nCompletableFuture&lt;List&lt;Duration, KeyEvent&gt;&gt; records =\n    keyboard.recordTill(new KeySet(keys), KeyState.KeyDown);\n</code></pre> Java 9 or above <pre><code>Set&lt;Key&gt; keys = Set.of(Key.LeftAlt, Key.A);\n\nCompletableFuture&lt;List&lt;Duration, KeyEvent&gt;&gt; records =\n    keyboard.recordTill(new KeySet(keys), KeyState.KeyDown);\n</code></pre>"},{"location":"keyboard/high-level-api/#play-a-recorded-or-created-collection-of-keys-at-defined-order","title":"Play a recorded or created collection of Keys at defined order.","text":"Kotlin <pre><code>keyboard.play(records, speedFactor = 1.25)\n</code></pre> NodeJS <pre><code>await keyboard.play(records, 1.0);\n</code></pre> Java 8 or above <pre><code>CompletableFuture&lt;Unit&gt; onFinish = keyboard.play(records, 1.25)\n</code></pre> <p><sup>Note: <code>speedFactor</code> defaults to 1.0 when not provided.</sup></p>"},{"location":"keyboard/key/","title":"Key Enum","text":"<p>The Key enum class represents corresponding key of the Keyboard. It is fundamentally used everywhere in this module.</p> <p>Note that these keys are aligned with the hardware scan codes to optimize the searching time (by doing a binary search).</p> <p><sup>Note: For NodeJS, strings are used instead of these enums, but their names are the same.</sup></p> <p>The full list of all the supported Keys are the following:</p> <pre><code>public enum class Key(public val keyCode: Int) {\n    Unknown(-1),\n    Esc(1),\n    Number1(2),\n    Number2(3),\n    Number3(4),\n    Number4(5),\n    Number5(6),\n    Number6(7),\n    Number7(8),\n    Number8(9),\n    Number9(10),\n    Number0(11),\n    Minus(12),\n    Equal(13),\n    Backspace(14),\n    Tab(15),\n    Q(16),\n    W(17),\n    E(18),\n    R(19),\n    T(20),\n    Y(21),\n    U(22),\n    I(23),\n    O(24),\n    P(25),\n    LeftBrace(26),\n    RightBrace(27),\n    Enter(28),\n    LeftCtrl(29),\n    A(30),\n    S(31),\n    D(32),\n    F(33),\n    G(34),\n    H(35),\n    J(36),\n    K(37),\n    L(38),\n    Semicolon(39),\n    Apostrophe(40),\n    Backtick(41),\n    LeftShift(42),\n    Backslash(43),\n    Z(44),\n    X(45),\n    C(46),\n    V(47),\n    B(48),\n    N(49),\n    M(50),\n    Comma(51),\n    Dot(52),\n    Slash(53),\n    RightShift(54),\n    KeypadAsterisk(55),\n    LeftAlt(56),\n    Space(57),\n    CapsLock(58),\n    F1(59),\n    F2(60),\n    F3(61),\n    F4(62),\n    F5(63),\n    F6(64),\n    F7(65),\n    F8(66),\n    F9(67),\n    F10(68),\n    NumLock(69),\n    ScrollLock(70),\n    Keypad7(71),\n    Keypad8(72),\n    Keypad9(73),\n    KeypadMinus(74),\n    Keypad4(75),\n    Keypad5(76),\n    Keypad6(77),\n    KeypadPlus(78),\n    Keypad1(79),\n    Keypad2(80),\n    Keypad3(81),\n    Keypad0(82),\n    KeypadDot(83),\n    F11(87),\n    F12(88),\n    KeypadEnter(96),\n    RightCtrl(97),\n    KeypadSlash(98),\n    RightAlt(100),\n    Home(102),\n    Up(103),\n    PageUp(104),\n    Left(105),\n    Right(106),\n    End(107),\n    Down(108),\n    PageDown(109),\n    Insert(110),\n    Delete(111),\n    Mute(113),\n    VolumeDown(114),\n    VolumeUp(115),\n    Power(116),\n    KeypadEqual(117),\n    Pause(119),\n    KeypadComma(121),\n    LeftSuper(125),\n    RightSuper(126),\n    Compose(127),\n    Stop(128),\n    Again(129),\n    Props(130),\n    Undo(131),\n    Front(132),\n    Copy(133),\n    Open(134),\n    Paste(135),\n    Find(136),\n    Cut(137),\n    Help(138),\n    Menu(139),\n    Calc(140),\n    Setup(141),\n    Sleep(142),\n    Wakeup(143),\n    Mail(155),\n    Bookmarks(156),\n    Computer(157),\n    Back(158),\n    Forward(159),\n    NextSong(163),\n    PlayPause(164),\n    PreviousSong(165),\n    StopCd(166),\n    Record(167),\n    Rewind(168),\n    Phone(169),\n    Refresh(173),\n    F13(183),\n    F14(184),\n    F15(185),\n    F16(186),\n    F17(187),\n    F18(188),\n    F19(189),\n    F20(190),\n    F21(191),\n    F22(192),\n    F23(193),\n    F24(194),\n    ;\n    // ...\n}\n</code></pre>"},{"location":"keyboard/low-level-api/","title":"Low Level API","text":"<p>Kotlin: Low Level API depends on NativeKeyboardHandler that can be obtained via <code>nativeKbHandlerForPlatform()</code>.</p> <p>Java: Low Level API depends on JNativeKeyboardHandler that can be obtained via <code>JNativeKeyboardHandler.INSTANCE</code>.</p> <p>NodeJS: Low Level API depends on JsKeyboardHandler that can be obtained via <code>JsNativeKeyboardHandler</code>.</p>"},{"location":"keyboard/low-level-api/#importing-the-package","title":"Importing the package.","text":"Kotlin (MPP) <pre><code>import com.github.animeshz.keyboard.nativeKbHandlerForPlatform\n\nval handler = nativeKbHandlerForPlatform()\n</code></pre> NodeJS <p><pre><code>const kbkt = require('keyboard-kt');\n\nconst handler = kbkt.com.github.animeshz.keyboard.JsNativeKeyboardHandler;\n</code></pre> <sup>Note: This large import is due to limitations of K/JS to not able to export to global namespace currently, see KT-37710.</sup></p> Java 8 or above <pre><code>import com.github.animeshz.keyboard.JKeyboardHandler;\n\nJKeyboardHandler handler = JKeyboardHandler.INSTANCE;\n</code></pre>"},{"location":"keyboard/low-level-api/#listening-to-events-using-flow-kotlin-or-callback-java","title":"Listening to events using Flow (Kotlin) or callback (Java).","text":"Kotlin <pre><code>handler.events\n    .filter { it.state == KeyState.KeyDown }\n    .map { it.key }\n    .collect { println(it) }\n</code></pre> NodeJS <pre><code>handler.addHandler((key, pressed) =&gt; {\n    if (pressed) {\n        console.log(key);\n    }\n});\n</code></pre> Java 8 or above <pre><code>handler.addHandler(keyEvent -&gt; {\n    if (keyEvent.state == KeyState.KeyDown) {\n        System.out.println(keyEvent.key);\n    }\n});\n</code></pre>"},{"location":"keyboard/low-level-api/#sending-a-key-event","title":"Sending a Key event.","text":"Kotlin <pre><code>handler.sendEvent(KeyEvent(Key.A, KeyState.KeyDown))\n</code></pre> NodeJS <pre><code>handler.sendEvent('A', true);\n</code></pre> Java 8 or above <pre><code>handler.sendEvent(new KeyEvent(Key.A, KeyState.KeyDown));\n</code></pre>"},{"location":"keyboard/low-level-api/#get-keystate-keydown-or-keyup-of-the-key","title":"Get KeyState (KeyDown or KeyUp) of the Key.","text":"Kotlin <pre><code>handler.getKeyState(Key.A)\nhandler.getKeyState(Key.RightAlt)\n</code></pre> NodeJS <p><pre><code>handler.getKeyState('A');\nhandler.getKeyState('RightAlt');\n</code></pre> <sup>Note: In JS it returns a boolean</sup></p> Java 8 or above <pre><code>handler.getKeyState(Key.A);\nhandler.getKeyState(Key.RightAlt);\n</code></pre>"},{"location":"keyboard/low-level-api/#get-states-of-toggleable-keys-returns-a-boolean","title":"Get States of Toggleable Keys (returns a Boolean).","text":"Kotlin <pre><code>handler.isCapsLockOn()\nhandler.isNumLockOn()\nhandler.isScrollLockOn()\n</code></pre> NodeJS <pre><code>handler.isCapsLockOn();\nhandler.isNumLockOn();\nhandler.isScrollLockOn();\n</code></pre> Java 8 or above <pre><code>handler.isCapsLockOn();\nhandler.isNumLockOn();\nhandler.isScrollLockOn();\n</code></pre>"}]}
{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home KeyboardMouse.kt is still in an experimental stage, as such we can't guarantee API stability between releases. While we'd love for you to try out our library, we don't recommend you use this in production just yet. What is KeyboardMouse.kt KeyboardMouse.kt is a lightweight (~60Kb per native platform, and ~70Kb on JVM), coroutine-based multiplatform kotlin library for idiomatically interacting with Keyboard and Mouse (receiving and sending global events). We aim to provide high-level as well as high-performant low-level access to such APIs. See the usage (Keyboard/Mouse) section below to know more! Motivation The most basic motivation (or use case) comes from trying to make our GUI app to hide on background and pop it back. Since most GUI frameworks only allow you to listen to events that are happening on the current window and when focus lost you don't get any, we've designed this lightweight library to easily control that. Another not quite good but a use-case is to simulate key-presses. We can integrate the Mouse and Keyboard API together, to for example simulate a click or something, it really depends on the personal use case. Contributing and future plans The Github discussions are open! Be sure to show your existence, say hi! and share if you have any upcoming ideas :) Issues and PRs are always welcome! For future plans and contributing to the project please checkout Contributing section.","title":"Home"},{"location":"#home","text":"KeyboardMouse.kt is still in an experimental stage, as such we can't guarantee API stability between releases. While we'd love for you to try out our library, we don't recommend you use this in production just yet.","title":"Home"},{"location":"#what-is-keyboardmousekt","text":"KeyboardMouse.kt is a lightweight (~60Kb per native platform, and ~70Kb on JVM), coroutine-based multiplatform kotlin library for idiomatically interacting with Keyboard and Mouse (receiving and sending global events). We aim to provide high-level as well as high-performant low-level access to such APIs. See the usage (Keyboard/Mouse) section below to know more!","title":"What is KeyboardMouse.kt"},{"location":"#motivation","text":"The most basic motivation (or use case) comes from trying to make our GUI app to hide on background and pop it back. Since most GUI frameworks only allow you to listen to events that are happening on the current window and when focus lost you don't get any, we've designed this lightweight library to easily control that. Another not quite good but a use-case is to simulate key-presses. We can integrate the Mouse and Keyboard API together, to for example simulate a click or something, it really depends on the personal use case.","title":"Motivation"},{"location":"#contributing-and-future-plans","text":"The Github discussions are open! Be sure to show your existence, say hi! and share if you have any upcoming ideas :) Issues and PRs are always welcome! For future plans and contributing to the project please checkout Contributing section.","title":"Contributing and future plans"},{"location":"contributing/","text":"Contributing and future plans \ud83d\udc4d\ud83c\udf89 First off, thanks for taking the time to contribute! \ud83c\udf89\ud83d\udc4d When contributing to this repository, please first discuss the change you wish to make via issue or github discussions. How is the project organized Keyboard The project (keyboard) is divided into 4 modules: common, jvm, linuxX64, and mingwX64. commonMain The commonMain is where all the public interfaces and classes are defined and almost everything about it is documented in the README.md under the Usages section and there's a commonTest module where you can find a few more examples, etc) jvmMain The JVM one is implemented through JNI which requies Docker to build cross-platform the shared libraries. The implementation of K/Native and K/JVM are same. linuxX64Main LinuxX64 is implemented utilizing the XLib and XInput2, and linked dynamically (no need to install any headers for build). There is a plan to use the /dev/uinput or /dev/input/eventX devices as a fallback, see #6 . mingwX64Main And lastly, MingwX64 is done through Win32 API. Future Plans Following are the future plans for the project: Migrate to dynamic library linking for linux (using dlopen/dlsym/dlclose from Posix API), see #1 for more details. on this commit . Create gradle task in to generate JNI headers for Kotlin external functions. Possibly by putting the task between compile-task and jar packaging task. References: Kotlin replacement for javah , How to solve missing javah in Java 10 \u2013 ugly way Implement way to cross compile the C/C++ library from any OS to any OS and then package it up in the resulting Jar. Done with PR #4 . Implement JNI each for different platforms. I've considered it to do via C++ instead of reusing Kotlin/Native because it will result in low performance and maybe huge sizes (if K/N becomes stable and performance wise equivalent we can directly reuse the sources we've written). Add Linux Device ( /dev/uinput | /dev/input/xxx ) based implementation of interaction of Keyboard/Mouse as a fallback when X11 is not present (after resolving #1 ). Implement Mouse API in similar way keyboard is implemented. Testing and building To build and publish to mavenLocal: $ ./gradlew build publishToMavenLocal The only requirement is to install Docker when building for JVM due to cross-compilation requirement of JNI native libs to be able to pack the full Jar from any platform that is supported cross-platform.","title":"Contributing and future plans"},{"location":"contributing/#contributing-and-future-plans","text":"\ud83d\udc4d\ud83c\udf89 First off, thanks for taking the time to contribute! \ud83c\udf89\ud83d\udc4d When contributing to this repository, please first discuss the change you wish to make via issue or github discussions.","title":"Contributing and future plans"},{"location":"contributing/#how-is-the-project-organized","text":"","title":"How is the project organized"},{"location":"contributing/#keyboard","text":"The project (keyboard) is divided into 4 modules: common, jvm, linuxX64, and mingwX64. commonMain The commonMain is where all the public interfaces and classes are defined and almost everything about it is documented in the README.md under the Usages section and there's a commonTest module where you can find a few more examples, etc) jvmMain The JVM one is implemented through JNI which requies Docker to build cross-platform the shared libraries. The implementation of K/Native and K/JVM are same. linuxX64Main LinuxX64 is implemented utilizing the XLib and XInput2, and linked dynamically (no need to install any headers for build). There is a plan to use the /dev/uinput or /dev/input/eventX devices as a fallback, see #6 . mingwX64Main And lastly, MingwX64 is done through Win32 API.","title":"Keyboard"},{"location":"contributing/#future-plans","text":"Following are the future plans for the project: Migrate to dynamic library linking for linux (using dlopen/dlsym/dlclose from Posix API), see #1 for more details. on this commit . Create gradle task in to generate JNI headers for Kotlin external functions. Possibly by putting the task between compile-task and jar packaging task. References: Kotlin replacement for javah , How to solve missing javah in Java 10 \u2013 ugly way Implement way to cross compile the C/C++ library from any OS to any OS and then package it up in the resulting Jar. Done with PR #4 . Implement JNI each for different platforms. I've considered it to do via C++ instead of reusing Kotlin/Native because it will result in low performance and maybe huge sizes (if K/N becomes stable and performance wise equivalent we can directly reuse the sources we've written). Add Linux Device ( /dev/uinput | /dev/input/xxx ) based implementation of interaction of Keyboard/Mouse as a fallback when X11 is not present (after resolving #1 ). Implement Mouse API in similar way keyboard is implemented.","title":"Future Plans"},{"location":"contributing/#testing-and-building","text":"To build and publish to mavenLocal: $ ./gradlew build publishToMavenLocal The only requirement is to install Docker when building for JVM due to cross-compilation requirement of JNI native libs to be able to pack the full Jar from any platform that is supported cross-platform.","title":"Testing and building"},{"location":"status-and-installation/","text":"Status and Installation Status Keyboard Windows x86_64 (64 bit) x86 (32 bit) Linux x86_64 (64 bit) x86 (32 bit) MacOS JVM Windows x86_64 (64 bit) Windows x86 (32 bit) Linux x86_64 (64 bit) Linux x86 (32 bit) Linux Arm32 Linux Arm64 Mouse Windows Linux MacOS JVM Installation build.gradle.kts Kotlin/JVM 1 2 3 4 5 6 7 8 9 10 11 12 plugins { kotlin ( \"jvm\" ) version \"<kotlin-version>\" } repositories { maven ( url = \"https://dl.bintray.com/animeshz/maven\" ) } dependencies { implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) } Java/JVM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 plugins { java } repositories { maven ( url = \"https://dl.bintray.com/animeshz/maven\" ) } dependencies { // Using from Java 8 or above (with complete Java support) implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:keyboard-kt-jdk8:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jdk8:<version>\" ) } Kotlin/Multiplatform 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 plugins { kotlin ( \"mutliplatform\" ) version \"<kotlin-version>\" } repositories { maven ( url = \"https://dl.bintray.com/animeshz/maven\" ) } kotlin { // Your targets jvm () mingwX64 { binaries { executable { entryPoint = \"main\" } } } linuxX64 { binaries { executable { entryPoint = \"main\" } } } // Dependency to the library sourceSets { // Either as common val commonMain by getting { dependencies { implementation ( kotlin ( \"stdlib-common\" )) implementation ( \"com.github.animeshz:keyboard-kt:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt:<version>\" ) } } // Or configure each-platform by the suffix such as -jvm, -linuxX64, etc. val jvmMain by getting { dependsOn ( commonMain ) dependencies { implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) } } } } build.gradle Kotlin/JVM 1 2 3 4 5 6 7 8 9 10 11 12 plugins { id \"kotlin-jvm\" version \"<kotlin-version>\" } repositories { maven { url \"https://dl.bintray.com/animeshz/maven\" } } dependencies { implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) } Java/JVM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 plugins { java } repositories { maven { url \"https://dl.bintray.com/animeshz/maven\" } } dependencies { // Using from Java 8 or above (with complete Java support) implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:keyboard-kt-jdk8:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jdk8:<version>\" ) } Kotlin/Multiplatform 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 plugins { id \"kotlin-mutliplatform\" version \"<kotlin-version>\" } repositories { maven { url \"https://dl.bintray.com/animeshz/maven\" } } kotlin { // Your targets jvm () mingwX64 { binaries { executable { entryPoint = \"main\" } } } linuxX64 { binaries { executable { entryPoint = \"main\" } } } // Dependency to the library sourceSets { // Either as common commonMain { dependencies { implementation ( kotlin ( \"stdlib-common\" )) implementation ( \"com.github.animeshz:keyboard-kt:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt:<version>\" ) } } // Or configure each-platform by the suffix such as -jvm, -linuxX64, etc. jvmMain { dependsOn ( commonMain ) dependencies { implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) } } } }","title":"Status and Installation"},{"location":"status-and-installation/#status-and-installation","text":"","title":"Status and Installation"},{"location":"status-and-installation/#status","text":"Keyboard Windows x86_64 (64 bit) x86 (32 bit) Linux x86_64 (64 bit) x86 (32 bit) MacOS JVM Windows x86_64 (64 bit) Windows x86 (32 bit) Linux x86_64 (64 bit) Linux x86 (32 bit) Linux Arm32 Linux Arm64 Mouse Windows Linux MacOS JVM","title":"Status"},{"location":"status-and-installation/#installation","text":"build.gradle.kts Kotlin/JVM 1 2 3 4 5 6 7 8 9 10 11 12 plugins { kotlin ( \"jvm\" ) version \"<kotlin-version>\" } repositories { maven ( url = \"https://dl.bintray.com/animeshz/maven\" ) } dependencies { implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) } Java/JVM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 plugins { java } repositories { maven ( url = \"https://dl.bintray.com/animeshz/maven\" ) } dependencies { // Using from Java 8 or above (with complete Java support) implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:keyboard-kt-jdk8:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jdk8:<version>\" ) } Kotlin/Multiplatform 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 plugins { kotlin ( \"mutliplatform\" ) version \"<kotlin-version>\" } repositories { maven ( url = \"https://dl.bintray.com/animeshz/maven\" ) } kotlin { // Your targets jvm () mingwX64 { binaries { executable { entryPoint = \"main\" } } } linuxX64 { binaries { executable { entryPoint = \"main\" } } } // Dependency to the library sourceSets { // Either as common val commonMain by getting { dependencies { implementation ( kotlin ( \"stdlib-common\" )) implementation ( \"com.github.animeshz:keyboard-kt:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt:<version>\" ) } } // Or configure each-platform by the suffix such as -jvm, -linuxX64, etc. val jvmMain by getting { dependsOn ( commonMain ) dependencies { implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) } } } } build.gradle Kotlin/JVM 1 2 3 4 5 6 7 8 9 10 11 12 plugins { id \"kotlin-jvm\" version \"<kotlin-version>\" } repositories { maven { url \"https://dl.bintray.com/animeshz/maven\" } } dependencies { implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) } Java/JVM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 plugins { java } repositories { maven { url \"https://dl.bintray.com/animeshz/maven\" } } dependencies { // Using from Java 8 or above (with complete Java support) implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:keyboard-kt-jdk8:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jdk8:<version>\" ) } Kotlin/Multiplatform 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 plugins { id \"kotlin-mutliplatform\" version \"<kotlin-version>\" } repositories { maven { url \"https://dl.bintray.com/animeshz/maven\" } } kotlin { // Your targets jvm () mingwX64 { binaries { executable { entryPoint = \"main\" } } } linuxX64 { binaries { executable { entryPoint = \"main\" } } } // Dependency to the library sourceSets { // Either as common commonMain { dependencies { implementation ( kotlin ( \"stdlib-common\" )) implementation ( \"com.github.animeshz:keyboard-kt:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt:<version>\" ) } } // Or configure each-platform by the suffix such as -jvm, -linuxX64, etc. jvmMain { dependsOn ( commonMain ) dependencies { implementation ( \"com.github.animeshz:keyboard-kt-jvm:<version>\" ) implementation ( \"com.github.animeshz:mouse-kt-jvm:<version>\" ) } } } }","title":"Installation"},{"location":"keyboard/high-level-api/","text":"High Level API .tabbed-set { margin-top: 0 !important; } Kotlin (Multiplatform / JVM) High Level API depends on Keyboard which is a wrapper around the NativeKeyboardHandler . Adding a shortcut (Hotkey). Kotlin 1 2 3 keyboard . addShortcut ( Key . LeftCtrl + Key . E , trigger = KeyState . KeyDown ) { println ( \"triggered\" ) } Note: trigger defaults to KeyState.KeyDown when not provided. Send a KeySet to the host machine. Kotlin 1 keyboard . send ( Key . LeftAlt + Key . M ) Write a sentence (String) on the host machine. Kotlin 1 keyboard . write ( \"Hello Keyboard!\" ) Suspensive wait till a KeySet is pressed. Kotlin 1 keyboard . awaitTill ( Key . LeftCtrl + Key . LeftShift + Key . R , trigger = KeyState . KeyDown ) Note: trigger defaults to KeyState.KeyDown when not provided. Record Key presses till specific KeySet is pressed into a KeyPressSequence (Type alias to a list of pair of Duration and KeyEvent). Kotlin 1 val records : KeyPressSequence = keyboard . recordTill ( Key . LeftAlt + Key . A ) Play a recorded or created collection of Keys at defined order. Kotlin 1 keyboard . play ( records , speedFactor = 1.25 ) Note: speedFactor defaults to 1.0 when not provided. Java (JVM) High Level API depends on JKeyboard . Adding a shortcut (Hotkey). Java 8 1 2 3 4 5 6 Set < Key > keys = new HashSet <> (); Collections . addAll ( keys , Key . LeftCtrl , Key . E ); keyboard . addShortcut ( new KeySet ( keys ), KeyState . KeyDown , () -> System . out . println ( \"triggered\" ) ); Java 9 or above 1 2 3 4 5 Set < Key > keys = Set . of ( Key . LeftCtrl , Key . E ); keyboard . addShortcut ( new KeySet ( keys ), KeyState . KeyDown , () -> System . out . println ( \"triggered\" ) ); Note: trigger defaults to KeyState.KeyDown when not provided. Send a KeySet to the host machine. Java 8 1 2 3 4 Set < Key > keys = new HashSet <> (); Collections . addAll ( keys , Key . LeftAlt , Key . M ); keyboard . send ( new KeySet ( keys )); Java 9 or above 1 2 3 Set < Key > keys = Set . of ( Key . LeftAlt , Key . M ); keyboard . send ( new KeySet ( keys )); Write a sentence (String) on the host machine. Java 8 or above 1 keyboard . write ( \"Hello Keyboard!\" ); Asynchronous wait till a KeySet is pressed. Java 8 1 2 3 4 5 Set < Key > keys = new HashSet <> (); Collections . addAll ( keys , Key . LeftCtrl + Key . LeftShift + Key . R ); keyboard . completeWhenPressed ( new KeySet ( keys ), KeyState . KeyDown ) . thenApply ( unit -> {...}); Java 9 or above 1 2 3 4 Set < Key > keys = Set . of ( Key . LeftCtrl + Key . LeftShift + Key . R ); keyboard . completeWhenPressed ( new KeySet ( keys ), KeyState . KeyDown ) . thenApply ( unit -> {...}); Note: trigger defaults to KeyState.KeyDown when not provided. Note: Unit is similar to java.lang.Void, a singleton object which has nothing to do for us. Record Key presses till specific KeySet is pressed into a list of pair of Duration and KeyEvent. Java 8 1 2 3 4 5 6 Set < Key > keys = new HashSet <> (); Collections . addAll ( keys , Key . LeftAlt , Key . A ); // `trigger` defaults to KeyState.KeyDown when not provided. CompletableFuture < List < Duration , KeyEvent >> records = keyboard . recordTill ( new KeySet ( keys )); Java 9 or above 1 2 3 4 Set < Key > keys = Set . of ( Key . LeftAlt , Key . A ); CompletableFuture < List < Duration , KeyEvent >> records = keyboard . recordTill ( new KeySet ( keys )); Play a recorded or created collection of Keys at defined order at given speed. Java 8 or above 1 CompletableFuture < Unit > onFinish = keyboard . play ( records , 1.25 ) Note: speedFactor defaults to 1.0 when not provided.","title":"High Level API"},{"location":"keyboard/high-level-api/#high-level-api","text":".tabbed-set { margin-top: 0 !important; }","title":"High Level API"},{"location":"keyboard/high-level-api/#kotlin-multiplatform-jvm","text":"High Level API depends on Keyboard which is a wrapper around the NativeKeyboardHandler . Adding a shortcut (Hotkey). Kotlin 1 2 3 keyboard . addShortcut ( Key . LeftCtrl + Key . E , trigger = KeyState . KeyDown ) { println ( \"triggered\" ) } Note: trigger defaults to KeyState.KeyDown when not provided. Send a KeySet to the host machine. Kotlin 1 keyboard . send ( Key . LeftAlt + Key . M ) Write a sentence (String) on the host machine. Kotlin 1 keyboard . write ( \"Hello Keyboard!\" ) Suspensive wait till a KeySet is pressed. Kotlin 1 keyboard . awaitTill ( Key . LeftCtrl + Key . LeftShift + Key . R , trigger = KeyState . KeyDown ) Note: trigger defaults to KeyState.KeyDown when not provided. Record Key presses till specific KeySet is pressed into a KeyPressSequence (Type alias to a list of pair of Duration and KeyEvent). Kotlin 1 val records : KeyPressSequence = keyboard . recordTill ( Key . LeftAlt + Key . A ) Play a recorded or created collection of Keys at defined order. Kotlin 1 keyboard . play ( records , speedFactor = 1.25 ) Note: speedFactor defaults to 1.0 when not provided.","title":"Kotlin (Multiplatform / JVM)"},{"location":"keyboard/high-level-api/#java-jvm","text":"High Level API depends on JKeyboard . Adding a shortcut (Hotkey). Java 8 1 2 3 4 5 6 Set < Key > keys = new HashSet <> (); Collections . addAll ( keys , Key . LeftCtrl , Key . E ); keyboard . addShortcut ( new KeySet ( keys ), KeyState . KeyDown , () -> System . out . println ( \"triggered\" ) ); Java 9 or above 1 2 3 4 5 Set < Key > keys = Set . of ( Key . LeftCtrl , Key . E ); keyboard . addShortcut ( new KeySet ( keys ), KeyState . KeyDown , () -> System . out . println ( \"triggered\" ) ); Note: trigger defaults to KeyState.KeyDown when not provided. Send a KeySet to the host machine. Java 8 1 2 3 4 Set < Key > keys = new HashSet <> (); Collections . addAll ( keys , Key . LeftAlt , Key . M ); keyboard . send ( new KeySet ( keys )); Java 9 or above 1 2 3 Set < Key > keys = Set . of ( Key . LeftAlt , Key . M ); keyboard . send ( new KeySet ( keys )); Write a sentence (String) on the host machine. Java 8 or above 1 keyboard . write ( \"Hello Keyboard!\" ); Asynchronous wait till a KeySet is pressed. Java 8 1 2 3 4 5 Set < Key > keys = new HashSet <> (); Collections . addAll ( keys , Key . LeftCtrl + Key . LeftShift + Key . R ); keyboard . completeWhenPressed ( new KeySet ( keys ), KeyState . KeyDown ) . thenApply ( unit -> {...}); Java 9 or above 1 2 3 4 Set < Key > keys = Set . of ( Key . LeftCtrl + Key . LeftShift + Key . R ); keyboard . completeWhenPressed ( new KeySet ( keys ), KeyState . KeyDown ) . thenApply ( unit -> {...}); Note: trigger defaults to KeyState.KeyDown when not provided. Note: Unit is similar to java.lang.Void, a singleton object which has nothing to do for us. Record Key presses till specific KeySet is pressed into a list of pair of Duration and KeyEvent. Java 8 1 2 3 4 5 6 Set < Key > keys = new HashSet <> (); Collections . addAll ( keys , Key . LeftAlt , Key . A ); // `trigger` defaults to KeyState.KeyDown when not provided. CompletableFuture < List < Duration , KeyEvent >> records = keyboard . recordTill ( new KeySet ( keys )); Java 9 or above 1 2 3 4 Set < Key > keys = Set . of ( Key . LeftAlt , Key . A ); CompletableFuture < List < Duration , KeyEvent >> records = keyboard . recordTill ( new KeySet ( keys )); Play a recorded or created collection of Keys at defined order at given speed. Java 8 or above 1 CompletableFuture < Unit > onFinish = keyboard . play ( records , 1.25 ) Note: speedFactor defaults to 1.0 when not provided.","title":"Java (JVM)"},{"location":"keyboard/key/","text":"Key Enum The Key enum class represents corresponding key of the Keyboard. It is fundamentally used everywhere in this module. Note that these keys are aligned with the hardware scan codes to optimize the searching time (by doing a binary search). The full list of all the supported Keys are the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 public enum class Key ( public val keyCode : Int ) { Unknown (- 1 ), Esc ( 1 ), Number1 ( 2 ), Number2 ( 3 ), Number3 ( 4 ), Number4 ( 5 ), Number5 ( 6 ), Number6 ( 7 ), Number7 ( 8 ), Number8 ( 9 ), Number9 ( 10 ), Number0 ( 11 ), Minus ( 12 ), Equal ( 13 ), Backspace ( 14 ), Tab ( 15 ), Q ( 16 ), W ( 17 ), E ( 18 ), R ( 19 ), T ( 20 ), Y ( 21 ), U ( 22 ), I ( 23 ), O ( 24 ), P ( 25 ), LeftBrace ( 26 ), RightBrace ( 27 ), Enter ( 28 ), LeftCtrl ( 29 ), A ( 30 ), S ( 31 ), D ( 32 ), F ( 33 ), G ( 34 ), H ( 35 ), J ( 36 ), K ( 37 ), L ( 38 ), Semicolon ( 39 ), Apostrophe ( 40 ), Backtick ( 41 ), LeftShift ( 42 ), Backslash ( 43 ), Z ( 44 ), X ( 45 ), C ( 46 ), V ( 47 ), B ( 48 ), N ( 49 ), M ( 50 ), Comma ( 51 ), Dot ( 52 ), Slash ( 53 ), RightShift ( 54 ), KeypadAsterisk ( 55 ), LeftAlt ( 56 ), Space ( 57 ), CapsLock ( 58 ), F1 ( 59 ), F2 ( 60 ), F3 ( 61 ), F4 ( 62 ), F5 ( 63 ), F6 ( 64 ), F7 ( 65 ), F8 ( 66 ), F9 ( 67 ), F10 ( 68 ), NumLock ( 69 ), ScrollLock ( 70 ), Keypad7 ( 71 ), Keypad8 ( 72 ), Keypad9 ( 73 ), KeypadMinus ( 74 ), Keypad4 ( 75 ), Keypad5 ( 76 ), Keypad6 ( 77 ), KeypadPlus ( 78 ), Keypad1 ( 79 ), Keypad2 ( 80 ), Keypad3 ( 81 ), Keypad0 ( 82 ), KeypadDot ( 83 ), F11 ( 87 ), F12 ( 88 ), KeypadEnter ( 96 ), RightCtrl ( 97 ), KeypadSlash ( 98 ), RightAlt ( 100 ), Home ( 102 ), Up ( 103 ), PageUp ( 104 ), Left ( 105 ), Right ( 106 ), End ( 107 ), Down ( 108 ), PageDown ( 109 ), Insert ( 110 ), Delete ( 111 ), Mute ( 113 ), VolumeDown ( 114 ), VolumeUp ( 115 ), Power ( 116 ), KeypadEqual ( 117 ), Pause ( 119 ), KeypadComma ( 121 ), LeftSuper ( 125 ), RightSuper ( 126 ), Compose ( 127 ), Stop ( 128 ), Again ( 129 ), Props ( 130 ), Undo ( 131 ), Front ( 132 ), Copy ( 133 ), Open ( 134 ), Paste ( 135 ), Find ( 136 ), Cut ( 137 ), Help ( 138 ), Menu ( 139 ), Calc ( 140 ), Setup ( 141 ), Sleep ( 142 ), Wakeup ( 143 ), Mail ( 155 ), Bookmarks ( 156 ), Computer ( 157 ), Back ( 158 ), Forward ( 159 ), NextSong ( 163 ), PlayPause ( 164 ), PreviousSong ( 165 ), StopCd ( 166 ), Record ( 167 ), Rewind ( 168 ), Phone ( 169 ), Refresh ( 173 ), F13 ( 183 ), F14 ( 184 ), F15 ( 185 ), F16 ( 186 ), F17 ( 187 ), F18 ( 188 ), F19 ( 189 ), F20 ( 190 ), F21 ( 191 ), F22 ( 192 ), F23 ( 193 ), F24 ( 194 ), ; // ... }","title":"Key Enum"},{"location":"keyboard/key/#key-enum","text":"The Key enum class represents corresponding key of the Keyboard. It is fundamentally used everywhere in this module. Note that these keys are aligned with the hardware scan codes to optimize the searching time (by doing a binary search). The full list of all the supported Keys are the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 public enum class Key ( public val keyCode : Int ) { Unknown (- 1 ), Esc ( 1 ), Number1 ( 2 ), Number2 ( 3 ), Number3 ( 4 ), Number4 ( 5 ), Number5 ( 6 ), Number6 ( 7 ), Number7 ( 8 ), Number8 ( 9 ), Number9 ( 10 ), Number0 ( 11 ), Minus ( 12 ), Equal ( 13 ), Backspace ( 14 ), Tab ( 15 ), Q ( 16 ), W ( 17 ), E ( 18 ), R ( 19 ), T ( 20 ), Y ( 21 ), U ( 22 ), I ( 23 ), O ( 24 ), P ( 25 ), LeftBrace ( 26 ), RightBrace ( 27 ), Enter ( 28 ), LeftCtrl ( 29 ), A ( 30 ), S ( 31 ), D ( 32 ), F ( 33 ), G ( 34 ), H ( 35 ), J ( 36 ), K ( 37 ), L ( 38 ), Semicolon ( 39 ), Apostrophe ( 40 ), Backtick ( 41 ), LeftShift ( 42 ), Backslash ( 43 ), Z ( 44 ), X ( 45 ), C ( 46 ), V ( 47 ), B ( 48 ), N ( 49 ), M ( 50 ), Comma ( 51 ), Dot ( 52 ), Slash ( 53 ), RightShift ( 54 ), KeypadAsterisk ( 55 ), LeftAlt ( 56 ), Space ( 57 ), CapsLock ( 58 ), F1 ( 59 ), F2 ( 60 ), F3 ( 61 ), F4 ( 62 ), F5 ( 63 ), F6 ( 64 ), F7 ( 65 ), F8 ( 66 ), F9 ( 67 ), F10 ( 68 ), NumLock ( 69 ), ScrollLock ( 70 ), Keypad7 ( 71 ), Keypad8 ( 72 ), Keypad9 ( 73 ), KeypadMinus ( 74 ), Keypad4 ( 75 ), Keypad5 ( 76 ), Keypad6 ( 77 ), KeypadPlus ( 78 ), Keypad1 ( 79 ), Keypad2 ( 80 ), Keypad3 ( 81 ), Keypad0 ( 82 ), KeypadDot ( 83 ), F11 ( 87 ), F12 ( 88 ), KeypadEnter ( 96 ), RightCtrl ( 97 ), KeypadSlash ( 98 ), RightAlt ( 100 ), Home ( 102 ), Up ( 103 ), PageUp ( 104 ), Left ( 105 ), Right ( 106 ), End ( 107 ), Down ( 108 ), PageDown ( 109 ), Insert ( 110 ), Delete ( 111 ), Mute ( 113 ), VolumeDown ( 114 ), VolumeUp ( 115 ), Power ( 116 ), KeypadEqual ( 117 ), Pause ( 119 ), KeypadComma ( 121 ), LeftSuper ( 125 ), RightSuper ( 126 ), Compose ( 127 ), Stop ( 128 ), Again ( 129 ), Props ( 130 ), Undo ( 131 ), Front ( 132 ), Copy ( 133 ), Open ( 134 ), Paste ( 135 ), Find ( 136 ), Cut ( 137 ), Help ( 138 ), Menu ( 139 ), Calc ( 140 ), Setup ( 141 ), Sleep ( 142 ), Wakeup ( 143 ), Mail ( 155 ), Bookmarks ( 156 ), Computer ( 157 ), Back ( 158 ), Forward ( 159 ), NextSong ( 163 ), PlayPause ( 164 ), PreviousSong ( 165 ), StopCd ( 166 ), Record ( 167 ), Rewind ( 168 ), Phone ( 169 ), Refresh ( 173 ), F13 ( 183 ), F14 ( 184 ), F15 ( 185 ), F16 ( 186 ), F17 ( 187 ), F18 ( 188 ), F19 ( 189 ), F20 ( 190 ), F21 ( 191 ), F22 ( 192 ), F23 ( 193 ), F24 ( 194 ), ; // ... }","title":"Key Enum"},{"location":"keyboard/low-level-api/","text":"Low Level API .tabbed-set { margin-top: 0 !important; } Kotlin (Multiplatform / JVM) Low Level API depends on NativeKeyboardHandler that can be obtained via nativeKbHandlerForPlatform() . Listening to events using Flow. Kotlin 1 2 3 4 handler . events . filter { it . state == KeyState . KeyDown } . map { it . key } . collect { println ( it ) } Sending a Key event. Kotlin 1 handler . sendEvent ( KeyEvent ( Key . A , KeyState . KeyDown )) Get KeyState (KeyDown or KeyUp) of the Key . Kotlin 1 2 handler . getKeyState ( Key . A ) handler . getKeyState ( Key . RightAlt ) Get States of Toggleable Keys (returns a Boolean). Kotlin 1 2 3 handler . isCapsLockOn () handler . isNumLockOn () handler . isScrollLockOn () Java (JVM) Low Level API depends on JNativeKeyboardHandler that can be obtained via JNativeKeyboardHandler.INSTANCE . Listening to events using a callback. Java 8 or above 1 2 3 4 5 handler . addHandler ( keyEvent -> { if ( keyEvent . state == KeyState . KeyDown ) { System . out . println ( keyEvent . key ); } }); Sending a Key event. Java 8 or above 1 handler . sendEvent ( new KeyEvent ( Key . A , KeyState . KeyDown )); Get KeyState (KeyDown or KeyUp) of the Key . Java 8 or above 1 2 handler . getKeyState ( Key . A ); handler . getKeyState ( Key . RightAlt ); Get States of Toggleable Keys (returns a boolean). Java 8 or above 1 2 3 handler . isCapsLockOn (); handler . isNumLockOn (); handler . isScrollLockOn ();","title":"Low Level API"},{"location":"keyboard/low-level-api/#low-level-api","text":".tabbed-set { margin-top: 0 !important; }","title":"Low Level API"},{"location":"keyboard/low-level-api/#kotlin-multiplatform-jvm","text":"Low Level API depends on NativeKeyboardHandler that can be obtained via nativeKbHandlerForPlatform() . Listening to events using Flow. Kotlin 1 2 3 4 handler . events . filter { it . state == KeyState . KeyDown } . map { it . key } . collect { println ( it ) } Sending a Key event. Kotlin 1 handler . sendEvent ( KeyEvent ( Key . A , KeyState . KeyDown )) Get KeyState (KeyDown or KeyUp) of the Key . Kotlin 1 2 handler . getKeyState ( Key . A ) handler . getKeyState ( Key . RightAlt ) Get States of Toggleable Keys (returns a Boolean). Kotlin 1 2 3 handler . isCapsLockOn () handler . isNumLockOn () handler . isScrollLockOn ()","title":"Kotlin (Multiplatform / JVM)"},{"location":"keyboard/low-level-api/#java-jvm","text":"Low Level API depends on JNativeKeyboardHandler that can be obtained via JNativeKeyboardHandler.INSTANCE . Listening to events using a callback. Java 8 or above 1 2 3 4 5 handler . addHandler ( keyEvent -> { if ( keyEvent . state == KeyState . KeyDown ) { System . out . println ( keyEvent . key ); } }); Sending a Key event. Java 8 or above 1 handler . sendEvent ( new KeyEvent ( Key . A , KeyState . KeyDown )); Get KeyState (KeyDown or KeyUp) of the Key . Java 8 or above 1 2 handler . getKeyState ( Key . A ); handler . getKeyState ( Key . RightAlt ); Get States of Toggleable Keys (returns a boolean). Java 8 or above 1 2 3 handler . isCapsLockOn (); handler . isNumLockOn (); handler . isScrollLockOn ();","title":"Java (JVM)"}]}